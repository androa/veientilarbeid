name: Build, push, and deploy

on:
  push:
    branches:
      - main

env:
  IMAGE_BASE: ghcr.io/${{github.repository}}/veientilarbeid

jobs:
  test-build-and-push:
    name: Test, build and push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        name: Checkout

      - name: Lag tag for image
        run: echo "TAG=$(git log -1 --pretty='%ad_%h' --date=format:'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Lag full image referanse
        run: echo "IMAGE=$IMAGE_BASE:$TAG" >> $GITHUB_ENV

      - name: Build app and publish Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo ${GITHUB_TOKEN} | docker login ghcr.io -u ${GITHUB_REPOSITORY} --password-stdin
          docker build --tag ${IMAGE} . \
            --build-arg REACT_APP_VERSION_HASH=${{ github.sha }} \
            --build-arg REACT_APP_BUILD_TIMESTAMP=$(date +'%Y-%m-%dT%H:%M:%S')
          docker push ${IMAGE}

  deploy-dev:
    name: Deploy til dev
    needs: test-build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        name: Checkout

      - name: Lag tag for image
        run: echo "TAG=$(git log -1 --pretty='%ad_%h' --date=format:'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Lag full image referanse
        run: echo "IMAGE=$IMAGE_BASE:$TAG" >> $GITHUB_ENV

      - name: Deploy
        uses: nais/deploy/actions/deploy@master
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais/nais-gcp.yaml
          VARS: nais/vars-dev-paw-gcp.yaml

  deploy-prod:
    name: Deploy til prod
    needs: deploy-dev
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        name: Checkout

      - name: Lag tag for image
        run: echo "TAG=$(git log -1 --pretty='%ad_%h' --date=format:'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Lag full image referanse
        run: echo "IMAGE=$IMAGE_BASE:$TAG" >> $GITHUB_ENV

      - name: Deploy
        uses: nais/deploy/actions/deploy@master
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          DRY_RUN: false
          CLUSTER: prod-gcp
          RESOURCE: nais/nais-gcp.yaml
          VARS: nais/vars-p-paw-gcp.yaml

  release:
    name: Tag and release
    needs: deploy-prod-paw
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        name: Checkout

      - name: Lag tag for image
        run: echo "TAG=$(git log -1 --pretty='%ad_%h' --date=format:'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release/prod@${{ env.TAG }}
          release_name: Release ${{ env.TAG }} to prod
          prerelease: false

  create-release-sentry:
    name: Create Sentry release
    runs-on: ubuntu-latest
    needs: test-build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 100

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install sentry-cli via npm
        run: npm install --no-save --no-audit

      - name: Generate new Sentry version
        run: echo "SENTRY_VERSION=$(./node_modules/@sentry/cli/bin/sentry-cli releases propose-version)" >> $GITHUB_ENV

      - name: Create Sentry release
        run: |
          ./node_modules/@sentry/cli/bin/sentry-cli releases new "$SENTRY_VERSION"
          ./node_modules/@sentry/cli/bin/sentry-cli releases set-commits --local --initial-depth 1 "$SENTRY_VERSION"
          ./node_modules/@sentry/cli/bin/sentry-cli releases finalize "$SENTRY_VERSION"
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

  
  deploy-demo:
    name: Deploy demo
    needs: test-build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        name: Checkout
      - run: vc --token ${VERCEL_TOKEN} --confirm --prod
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  
  take-screenshots:
    name: Ta skjermbilder og last opp
    needs: deploy-demo
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: navikt/screenshots-action@1.0.7
      name: Tar bilde av forsiden
      with:
        url: https://veientilarbeid.nav.party
    - uses: actions/upload-artifact@v1
      name: Laster opp skjermbilder som artifakt
      with:
        name: Screenshots
        path: screenshots
    - run: vc screenshots --local-config now-screenshots.json --token ${VERCEL_TOKEN} --confirm --prod
      name: Legger skjermbilder på Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
